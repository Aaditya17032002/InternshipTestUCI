# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JNvNLRP8UkSDot1xr1W5jX-Q5FqqHt9c
"""

!pip install pymupdf PyPDF2

from google.colab import files
uploaded = files.upload()

import os
import re
import json
import fitz  # PyMuPDF
from PyPDF2 import PdfReader

try:
    import pytesseract
    from PIL import Image
    OCR_ENABLED = True
except ImportError:
    OCR_ENABLED = False

SECTION_KEYWORDS = {
    "technical_requirements": ["technical requirements", "technical specs", "technical section"],
    "budget": ["budget", "cost breakdown", "financial"],
    "qualification": ["qualification", "experience", "eligibility"]
}

SECTION_LIMITS = {
    "technical_requirements": 8,
    "budget": 4,
    "qualification": 4
}

def validate_file_format(filepath):
    if not filepath.lower().endswith(".pdf"):
        return False
    try:
        PdfReader(filepath)
        return True
    except:
        return False

def extract_text_and_fonts(filepath):
    doc = fitz.open(filepath)
    font_info = []
    margin_issues = False
    text_by_page = []

    for page in doc:
        text = page.get_text("dict")
        text_by_page.append(page.get_text())

        for block in text["blocks"]:
            if "lines" in block:
                for line in block["lines"]:
                    for span in line["spans"]:
                        font_info.append({
                            "font": span["font"],
                            "size": round(span["size"])
                        })
        # Margin check (simplified): approx 1 inch = 72 pt; page size 612x792 pt
        margin = page.rect
        if not (abs(margin.x0) < 5 and abs(margin.y0) < 5 and abs(margin.x1 - 612) < 5 and abs(margin.y1 - 792) < 5):
            margin_issues = True

    return font_info, margin_issues, text_by_page

def validate_format(font_info, margin_issue):
    size_pass = all(f["size"] == 12 for f in font_info)
    font_pass = all("Times" in f["font"] for f in font_info)
    return {
        "file_type": "pass",
        "font_size": "pass" if size_pass else "fail",
        "font_family": "pass" if font_pass else "fail",
        "margin": "fail" if margin_issue else "pass"
    }

def detect_sections(text_by_page):
    section_pages = {k: [] for k in SECTION_KEYWORDS}

    current_section = None
    for i, text in enumerate(text_by_page):
        for section, keywords in SECTION_KEYWORDS.items():
            if any(kw.lower() in text.lower() for kw in keywords):
                current_section = section
        if current_section:
            section_pages[current_section].append(i + 1)

    results = {}
    for section, pages in section_pages.items():
        page_count = len(set(pages))
        results[f"{section}_pages"] = page_count
        results[section] = "pass" if 0 < page_count <= SECTION_LIMITS[section] else "fail"

    return results

def analyze_pdf(filepath):
    report = {
        "format": {},
        "content": {}
    }

    if not validate_file_format(filepath):
        report["format"] = {
            "file_type": "fail",
            "font_size": "n/a",
            "font_family": "n/a",
            "margin": "n/a"
        }
        return report

    font_info, margin_issues, text_by_page = extract_text_and_fonts(filepath)
    report["format"] = validate_format(font_info, margin_issues)
    report["content"] = detect_sections(text_by_page)

    return report

def save_report(report, output_path="compliance_report.json"):
    with open(output_path, "w") as f:
        json.dump(report, f, indent=2)

    from google.colab import files
    files.download(output_path)

pdf_path = list(uploaded.keys())[0]
report = analyze_pdf(pdf_path)
print(json.dumps(report, indent=2))
save_report(report)

